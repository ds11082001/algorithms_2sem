#include <iostream>
#include <vector>
#include <algorithm>

enum colors : char {
    white = 0,
    gray = 1,
    black = 2
};

void dfsForConnectedComponents(const std::vector<std::vector<int>> &v, std::vector<char> &used, int currVertex,
                               std::vector<int> &answer) {
    used[currVertex] = gray;
    for (int i = 0; i < v[currVertex].size(); ++i) {
        if (used[v[currVertex][i]] == white) {
            dfsForConnectedComponents(v, used, v[currVertex][i], answer);
        }
    }
    used[currVertex] = black;
    answer.push_back(currVertex);
}

void dfsForCondensation(const std::vector<std::vector<int>> &v, std::vector<char> &used, int currVertex,
                        std::vector<int> &componentNum, int numOfComponents) {
    used[currVertex] = gray;
    for (int i = 0; i < v[currVertex].size(); ++i) {
        if (used[v[currVertex][i]] == white) {
            dfsForCondensation(v, used, v[currVertex][i], componentNum, numOfComponents);
        }
    }
    used[currVertex] = black;
    componentNum[currVertex] = numOfComponents;
}

void input(std::vector<std::vector<int>> &g, std::vector<std::vector<int>> &gReverse, int m) {
    for (int i = 0; i < m; ++i) {
        int a, b;
        std::cin >> a >> b;
        a--;
        b--;
        g[a].push_back(b);
        gReverse[b].push_back(a);
    }
}

std::pair<std::vector<int>, int> condensation(std::vector<std::vector<int>> &g,
                                              std::vector<std::vector<int>> &gReverse, int n) {
    std::vector<int> answer;
    std::vector<char> used(n, white);
    for (int i = 0; i < n; ++i) {
        if (used[i] == white) {
            dfsForConnectedComponents(gReverse, used, i, answer);
        }
    }
    std::reverse(answer.begin(), answer.end());
    for (int i = 0; i < n; ++i) {
        used[i] = white;
    }
    int numOfComponents = 0;
    std::vector<int> componentNum(n);
    for (int i = 0; i < n; ++i) {
        int v = answer[i];
        if (used[v] == white) {
            dfsForCondensation(g, used, v, componentNum, numOfComponents);
            numOfComponents++;
        }
    }
    return std::make_pair(componentNum, numOfComponents);
}

void findAnswer(std::vector<std::vector<int>> &g, std::vector<int> &componentNum, int numOfComponents, int n) {
    std::vector<bool> inDegree(numOfComponents, false);
    std::vector<bool> outDegree(numOfComponents, false);

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < g[i].size(); ++j) {
            int v = g[i][j];
            if (componentNum[i] != componentNum[v]) {
                inDegree[componentNum[v]] = true;
                outDegree[componentNum[i]] = true;
            }
        }
    }
    int numOfSources = 0;
    int numOfDrains = 0;
    for (int i = 0; i < numOfComponents; ++i) {
        if (not inDegree[i]) {
            numOfSources++;
        }
        if (not outDegree[i]) {
            numOfDrains++;
        }
    }
    if (numOfComponents != 1) {
        std::cout << std::max(numOfSources, numOfDrains);
    } else {
        std::cout << 0;
    }
}

int main() {
    int n, m;
    std::cin >> n >> m;
    std::vector<std::vector<int>> g(n);
    std::vector<std::vector<int>> gReverse(n);
    input(g, gReverse, m);
    std::vector<int> answer;
    std::vector<char> used(n, white);
    std::pair<std::vector<int>, int> gCondence = condensation(g, gReverse, n);
    findAnswer(g, gCondence.first, gCondence.second, n);
    return 0;
}

