#include <algorithm>
#include <iostream>
#include <map>
#include <stack>
#include <string>
#include <vector>

using std::vector;

const int MAX_VALUE = 1e9;

// Фактически в задаче требуется найти минимальный разрез в графе. Тогда нас
// не интересует, где располагается, например, 0-я вершина (в 1-й доле или
// во 2-й), поэтому б. о. о. она в 1-й доле. Пройдемся по остальным вершинам и
// и найдем алгоритмом Форда-Фалкерсона, при каком стоке минимальный мах-поток.
// По теореме Форда-Фалкерсона мах-поток равен минимальному разрезу, поэтому 
// осталось лишь понять, какие вершины в каких долях. Для этого нам надо найти
// достижимые из стартовой вершины в остаточной сети. Именно эти вершины войдут
// в первый разрез, а остальные - во второй.


void dfs(int v, int t, std::map<int, vector<vector<int>>> &edges, vector<int> &prev, vector<char> &used) {
    if (v == t) {
        return;
    }
    used[v] = 1;
    for (auto i : edges[v]) {
        if (i[1] > 0 && not used[i[0]]) {
            prev[i[0]] = v;
            dfs(i[0], t, edges, prev, used);
        }
    }
}

std::map<int, vector<vector<int>>> input(int n) {
    std::map<int, vector<vector<int>>> edges; // в первом аргументе map'а
    // хранится начальная вершина, во втором - конечная вершина, пропускная
    // способность в текущей остаточной сети и текущий поток соответственно.
    std::string s;
    for (int i = 0; i < n; ++i) {
        std::cin >> s;
        for (int j = 0; j < s.size(); ++j) {
            if (s[j] == '1') {
                edges[i].push_back({j, 1, 0});
            }
        }
    }
    return edges;
}

int findPath(int s, int t, std::map<int, vector<std::vector<int>>> &edges, vector<int> &prev, vector<int> &flow) {
    std::stack<int> st;
    st.push(s);
    int cur_vertex;
    flow[s] = MAX_VALUE;
    while (prev[t] == -1 && not st.empty()) {
        cur_vertex = st.top();
        st.pop();
        for (int i = 0; i < edges[cur_vertex].size(); ++i) {
            int next_vertex = edges[cur_vertex][i][0];
            if (edges[cur_vertex][i][1] > 0 && flow[next_vertex] == 0) {
                st.push(next_vertex);
                prev[next_vertex] = cur_vertex;
                if (edges[cur_vertex][i][1] > 0 && flow[next_vertex] == 0) {
                    flow[next_vertex] = edges[cur_vertex][i][1];
                } else {
                    flow[next_vertex] = flow[cur_vertex];
                }
            }
        }
    }
    if (prev[t] == -1) {
        return 0;
    }
    cur_vertex = t;
    while (cur_vertex != s) {
        int v = prev[cur_vertex];
        bool used = false;
        for (auto &i : edges[v]) {
            if (i[0] == cur_vertex) {
                i[1] -= flow[t];
                i[2] += flow[t];
                used = true;
                break;
            }
        }
        if (not used) {
            edges[v].push_back({cur_vertex, -flow[t], flow[t]});
        }
        used = false;
        for (auto &i : edges[cur_vertex]) {
            if (i[0] == v) {
                i[1] += flow[t];
                i[2] -= flow[t];
                used = true;
                break;
            }
        }
        if (not used) {
            edges[cur_vertex].push_back({v, flow[t], -flow[t]});
        }
        cur_vertex = v;
    }
    return flow[t];
}

int fordFalkerson(int s, int t, int n, std::map<int, vector<vector<int>>> &edges, vector<int> &prev,
                  vector<int> &flow) {
    int max_flow = 0;
    int add_flow;
    int cur_vertex;
    vector<vector<int>> answer;
    do {
        prev.assign(n, -1);
        flow.assign(n, 0);

        add_flow = findPath(s, t, edges, prev, flow);
        max_flow += add_flow;
        for (int i = 0; i < add_flow; ++i) {
            cur_vertex = t;
            while (cur_vertex != s) {
                int v = prev[cur_vertex];
                flow[v] += add_flow;
                flow[cur_vertex] -= add_flow;
                cur_vertex = v;
            }
        }
    } while (add_flow > 0);
    return max_flow;
}

int findMinFlow(int s, int n, std::map<int, vector<vector<int>>> &edges, vector<int> &prev, vector<int> &flow) {
    int min_flow = MAX_VALUE;
    int min_vertex = -1;
    int cur_flow;
    std::map<int, vector<vector<int>>> edges_copy;
    for (int i = 1; i < n; ++i) {
        edges_copy = edges;
        cur_flow = fordFalkerson(s, i, n, edges_copy, prev, flow);
        if (cur_flow < min_flow) {
            min_flow = cur_flow;
            min_vertex = i;
        }
    }
    return min_vertex;
}

std::pair<vector<int>, vector<int>> findSections(int s, int t, int n, std::map<int, vector<vector<int>>> &edges) {
    std::pair<vector<int>, vector<int>> v;
    vector<int> prev(n, -1);
    vector<char> used(n, 0);
    dfs(s, t, edges, prev, used);
    v.first.push_back(s);
    v.second.push_back(t);
    for (int i = 0; i < n; ++i) {
        if (prev[i] != -1) {
            if (i != t && i != t) {
                v.first.push_back(i);
            }
        } else {
            if (i != s && i != t) {
                v.second.push_back(i);
            }
        }
    }
    return v;
}

void printAnswer(const std::pair<vector<int>, vector<int>> &answer) {
    for (auto i : answer.first) {
        std::cout << i + 1 << " ";
    }
    std::cout << std::endl;
    for (auto i : answer.second) {
        std::cout << i + 1 << " ";
    }
}

int main() {
    int n;
    std::cin >> n;
    std::map<int, vector<vector<int>>> edges = input(n);
    vector<int> prev(n, -1);
    vector<int> flow(n, 0);
    int t = findMinFlow(0, n, edges, prev, flow);
    fordFalkerson(0, t, n, edges, prev, flow);
    std::pair<vector<int>, vector<int>> answer = findSections(0, t, n, edges);
    printAnswer(answer);
    return 0;
}
